<!DOCTYPE html>
<html>

<head>
    <title>CATS-
        Effort By Expense Category-
            0.0.1
    </title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Mar 09 2018 00:19:41 GMT+0000 (UTC) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Mar 09 2018 00:19:41 GMT+0000 (UTC)";
        var ARTIFACT = "";
        var BUILDER = "ec2-user";
        var CHECKSUM = "5951742279";
    </script>

    <script type="text/javascript" src="https://us1.rallydev.com/apps/2.1/sdk-debug.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->


    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {

    singleton: true,

    loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    console.error("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    console.error("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    }
});

/*
 * originally written for when we supported older versions of IE that wouldn't
 * deal with console.log.
 *
 * Now allows for saving log.
 */
Ext.define('CArABU.technicalservices.Logger',{

    saveForLater: false,
    saveLines: 100,
    logArray: [],

    constructor: function(config){
        Ext.apply(this,config);
    },

    setSaveForLater: function(saveme){
        this.saveForLater = saveme;
    },

    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";

        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        if ( this.saveForLater ) {
            if ( !this.logArray) {
                this.logArray = [];
            }
            this.logArray.push(output_args.join(' '));

            if ( this.logArray.length > this.saveLines ) {
                this.logArray.shift();
            }
        }

        window.console && console.log.apply(console,output_args);
    },

    getLogText: function() {
        if ( ! this.logArray || this.logArray.length === 0 ) { return "-- no log --"; }
        return this.logArray.join('<br/>');
    } ,

    displayLog: function() {
        var text = this.getLogText();

        this.popup = Ext.create('Rally.ui.dialog.Dialog', {
            width      : Ext.getBody().getWidth() - 20,
            height     : Ext.getBody().getHeight() - 20,
            closable   : true,
            title      : 'Log',
            autoShow   : true,
            layout     : 'border',
            defaults   : {
                layout : 'fit',
                width  : '50%',
                border : false
            },
            items: [{
                region : 'center',
                xtype: 'container',
                html: text,
                autoScroll: true
            }]
        });
    }
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',

    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,

    /**
     *
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",

    defaults: { padding: 5, margin: 5 },

    closable: true,

    draggable: true,

    autoShow: true,

    width: 350,

    informationalConfig: null,

    showLog: false,
    logger: null,

    items: [
        {xtype:'container', itemId:'information' },
        {xtype:'container', itemId:'button_box'}
    ],

    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },

    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER  = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.

        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }

        return chk;
    },

    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });

        return deferred.promise;
    },

    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);

        container.add(config);
    },

    afterRender: function() {
        var app = Rally.getApp();

        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
        }

        if ( this.showLog && this.logger ) {
            this.down('#button_box').add({
                xtype:'rallybutton',
                text:'Show Log',
                listeners: {
                    scope: this,
                    click: function() {
                        this.logger.displayLog();
                    }
                }
            });
        }

        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },

    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                dock: 'bottom'
            });
        }

        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });

        if ( APP_BUILD_DATE ) {
            var build_html = Ext.String.format("Built on: {0} <br/>Built by: {1}",
                APP_BUILD_DATE,
                BUILDER);

            if ( ARTIFACT ) {
                build_html = build_html + "<br/>Source artifact: " + ARTIFACT;
            }

            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'top',
                html: build_html
            });
        }
    }
});

/* global Ext */
Ext.define("Constants", {
    statics: {
        ID: {
            ACCEPTED_START_DATE: 'ACCEPTED_START_DATE',
            ACCEPTED_END_DATE: 'ACCEPTED_END_DATE',
            USER_STORY_STORE: 'USER_STORY_STORE',
            TABLE_AREA: 'TABLE_AREA',
        },
        LABEL: {
            ACCEPTED_START_DATE: "Start Date",
            ACCEPTED_END_DATE: "End Date",
            TEAM_NAME: 'Team',
            DELIVERABLE_ID: 'Deliverable'
        },
        USER_STORY_FIELDS: [
            'ObjectID', 'FormattedID', 'Name', 'AcceptedDate', 'Deliverable', 'c_ExpenseCategory',
            'Parent',
            'State',
            'Owner',
            'PlanEstimate',
            'Project'
        ]
    }
})

/* global Ext */
Ext.define("SummaryItem", {
    extend: 'Ext.data.Model',
    fields: [{
        name: 'TeamName',
        type: 'string',
    }, {
        name: 'DeliverableFormattedId',
        type: 'string'
    }, {
        name: 'DeliverableName',
        type: 'string'
    }, {
        name: 'DeliverableState',
        type: 'string'
    }, {
        name: 'ExpenseCategory',
        type: 'string'
    }, {
        name: 'PercentEffort',
        type: 'float'
    }, {
        name: 'PortfolioItem/Project_FormattedId',
        type: 'string'
    }, {
        name: 'PortfolioItem/Project_Name',
        type: 'string'
    }, {
        name: 'InitiativeFormattedId',
        type: 'string'
    }, {
        name: 'InitiativeName',
        type: 'string'
    }],
    constructor: function(group) {
        this.callParent(arguments);

        var firstItem = group.children[0];
        var project = firstItem.get('Project');
        var deliverable = firstItem.get('Deliverable');

        if (project) {
            this.set('TeamName', project.Name);
        }

        if (deliverable) {
            this.set('DeliverableFormattedId', deliverable.FormattedID);
            this.set('DeliverableName', deliverable.Name);
            this.set('DeliverableState', deliverable.State);

            var portfolioItem_Project = deliverable.Parent;
            if (portfolioItem_Project) {
                this.set('PortfolioItem/Project_FormattedId', portfolioItem_Project.FormattedID);
                this.set('PortfolioItem/Project_Name', portfolioItem_Project.Name);
                var initiative = portfolioItem_Project.Parent;
                if (initiative) {
                    this.set('InitiativeFormattedId', initiative.FormattedID);
                    this.set('InitiativeName', initiative.Name);
                }
            }
        }

        this.set('ExpenseCategory', firstItem.get('c_ExpenseCategory'));
        this.set('PercentEffort', 'TODO');

    }
});

/* global Ext Deft TSUtilities CArABU Constants SummaryItem _ */
Ext.define("CArABU.app.TSApp", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    defaults: { margin: 10 },
    layout: 'vbox',
    integrationHeaders: {
        name: "CArABU.app.TSApp"
    },
    logger: new CArABU.technicalservices.Logger(),

    items: [{
        xtype: 'container',
        layout: {
            type: 'hbox',
        },
        items: [{
            xtype: 'rallydatefield',
            itemId: Constants.ID.ACCEPTED_START_DATE,
            fieldLabel: Constants.LABEL.ACCEPTED_START_DATE,
            stateful: true,
            stateId: Constants.ID.ACCEPTED_START_DATE
        }, {
            xtype: 'rallydatefield',
            itemId: Constants.ID.ACCEPTED_END_DATE,
            fieldLabel: Constants.LABEL.ACCEPTED_END_DATE,
            padding: '0 0 0 20',
            stateful: true,
            stateId: Constants.ID.ACCEPTED_END_DATE
        }],
    }, {
        xtype: 'container',
        itemId: Constants.ID.TABLE_AREA,
        layout: 'vbox',
        width: 500,
        height: 500,
    }],

    startDate: undefined,
    endDate: undefined,

    launch: function() {
        this.setLoading("Loading stuff...");
        // Get references to the date controls
        var start = this.down('#' + Constants.ID.ACCEPTED_START_DATE);
        var end = this.down('#' + Constants.ID.ACCEPTED_END_DATE);

        // Get their current values from their saved state (this happens before app launch is called)
        this.startDate = start.getValue();
        this.endDate = end.getValue();
        this.loadData();

        // Listen for user changes to the dates
        start.on('change', this.onStartDateChange, this);
        end.on('change', this.onEndDateChange, this);

        this.setLoading(false);
    },

    onStartDateChange: function(datePicker, newDate) {
        if (this.startDate != newDate) {
            this.startDate = newDate;
            this.loadData();
        }
    },

    onEndDateChange: function(datePicker, newDate) {
        if (this.endDate != newDate) {
            this.endDate = newDate;
            this.loadData();
        }
    },

    loadData: function() {
        if (this.startDate && this.endDate) {
            var store = Ext.create('Rally.data.wsapi.Store', {
                storeId: Constants.ID.USER_STORY_STORE,
                model: 'HierarchicalRequirement',
                autoLoad: false,
                fetch: Constants.USER_STORY_FIELDS,
                filters: [{
                        property: 'AcceptedDate',
                        operator: '>=',
                        value: this.startDate
                    },
                    {
                        property: 'AcceptedDate',
                        operator: '<=',
                        value: this.endDate
                    }
                ],
                limit: Infinity,
                getGroupString: this.getGroupString
            });
            store.load().then({
                scope: this,
                success: function(records) {
                    console.log(records);
                    console.log(store);
                    var summaryItems = _.map(store.getGroups(), function(group) {
                        return new SummaryItem(group);
                    });
                    this.addGrid(summaryItems);
                }
            });
        }
    },

    addGrid: function(data) {
        var tableArea = this.down('#' + Constants.ID.TABLE_AREA);
        tableArea.removeAll();
        var store = Ext.create('Rally.data.Store', {
            data: data,
            model: SummaryItem
        });
        tableArea.add({
            xtype: 'rallygrid',
            store: store,
            width: 400,
            height: 400,
            columnCfgs: [{
                text: Constants.LABEL.TEAM_NAME,
                dataIndex: 'TeamName'
            }, {
                text: Constants.LABEL.DELIVERABLE_ID,
                dataIndex: 'DeliverableFormattedId'
            }]
        })
    },

    getGroupString: function(instance) {
        var project = instance.get('Project');
        var deliverable = instance.get('Deliverable');
        var expenseCategory = instance.get('c_ExpenseCategory') || 'None';
        var projectOid = project ? project.ObjectID : 'None';
        var deliverableOid = deliverable ? deliverable.ObjectID : 'None';
        return [projectOid, deliverableOid, expenseCategory].join(':');
    },

    getSettingsFields: function() {
        return [];
    },

    getOptions: function() {
        var options = [{
            text: 'About...',
            handler: this._launchInfo,
            scope: this
        }];

        return options;
    },

    _launchInfo: function() {
        if (this.about_dialog) { this.about_dialog.destroy(); }

        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink', {
            showLog: this.getSetting('saveLog'),
            logger: this.logger
        });
    },

    isExternal: function() {
        return typeof(this.getAppId()) == 'undefined';
    }

});


            Rally.launchApp('CArABU.app.TSApp', {
                name: 'Effort By Expense Category'
            });
        });
    </script>

    <style type="text/css">
        
.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>

<body></body>

</html>